syntax = "proto3";
package symphony.txfees.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/osmosis-labs/osmosis/v26/x/txfees/types";

service Query {
  // FeeTokens returns a list of all the whitelisted fee tokens and their
  // corresponding pools. It does not include the BaseDenom, which has its own
  // query endpoint
  rpc FeeTokens(QueryFeeTokensRequest) returns (QueryFeeTokensResponse) {
    option (google.api.http).get = "/symphony/txfees/v1beta1/fee_tokens";
  }

  // DenomSpotPrice returns all spot prices by each registered token denom.
  rpc DenomSpotPrice(QueryDenomSpotPriceRequest)
      returns (QueryDenomSpotPriceResponse) {
    option (google.api.http).get =
        "/symphony/txfees/v1beta1/spot_price_by_denom";
  }
}

message QueryFeeTokensRequest {}
message QueryFeeTokensResponse {
  repeated string fee_tokens = 1 [
    (gogoproto.moretags) = "yaml:\"fee_tokens\"",
    (gogoproto.nullable) = false
  ];
}

// QueryDenomSpotPriceRequest defines grpc request structure for querying spot
// price for the specified tx fee denom
message QueryDenomSpotPriceRequest {
  string denom = 1 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
}

// QueryDenomSpotPriceRequest defines grpc response structure for querying spot
// price for the specified tx fee denom
message QueryDenomSpotPriceResponse {
  uint64 poolID = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string spot_price = 2 [
    (gogoproto.moretags) = "yaml:\"spot_price\"",

    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}