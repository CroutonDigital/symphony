// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: symphony/bridge/v1beta1/events.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventInboundTransfer struct {
	// Sender is a sender's address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// DestAddr is a destination Osmosis address
	DestAddr string `protobuf:"bytes,2,opt,name=dest_addr,json=destAddr,proto3" json:"dest_addr,omitempty"`
	// Asset contains a source chain and a target denom
	Asset Asset `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset"`
	// Amount of coins to transfer
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *EventInboundTransfer) Reset()         { *m = EventInboundTransfer{} }
func (m *EventInboundTransfer) String() string { return proto.CompactTextString(m) }
func (*EventInboundTransfer) ProtoMessage()    {}
func (*EventInboundTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_25c7a5d2cab627be, []int{0}
}
func (m *EventInboundTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInboundTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInboundTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInboundTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInboundTransfer.Merge(m, src)
}
func (m *EventInboundTransfer) XXX_Size() int {
	return m.Size()
}
func (m *EventInboundTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInboundTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_EventInboundTransfer proto.InternalMessageInfo

func (m *EventInboundTransfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventInboundTransfer) GetDestAddr() string {
	if m != nil {
		return m.DestAddr
	}
	return ""
}

func (m *EventInboundTransfer) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset{}
}

type EventOutboundTransfer struct {
	// Sender is a sender's address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// DestAddr is a destination Osmosis address
	DestAddr string `protobuf:"bytes,2,opt,name=dest_addr,json=destAddr,proto3" json:"dest_addr,omitempty"`
	// Asset contains a source chain and a target denom
	Asset Asset `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset"`
	// Amount of coins to transfer
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *EventOutboundTransfer) Reset()         { *m = EventOutboundTransfer{} }
func (m *EventOutboundTransfer) String() string { return proto.CompactTextString(m) }
func (*EventOutboundTransfer) ProtoMessage()    {}
func (*EventOutboundTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_25c7a5d2cab627be, []int{1}
}
func (m *EventOutboundTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutboundTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutboundTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutboundTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutboundTransfer.Merge(m, src)
}
func (m *EventOutboundTransfer) XXX_Size() int {
	return m.Size()
}
func (m *EventOutboundTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutboundTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutboundTransfer proto.InternalMessageInfo

func (m *EventOutboundTransfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventOutboundTransfer) GetDestAddr() string {
	if m != nil {
		return m.DestAddr
	}
	return ""
}

func (m *EventOutboundTransfer) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset{}
}

type EventUpdateParams struct {
	NewSigners     []string          `protobuf:"bytes,1,rep,name=new_signers,json=newSigners,proto3" json:"new_signers,omitempty"`
	CreatedSigners []string          `protobuf:"bytes,2,rep,name=created_signers,json=createdSigners,proto3" json:"created_signers,omitempty"`
	DeletedSigners []string          `protobuf:"bytes,3,rep,name=deleted_signers,json=deletedSigners,proto3" json:"deleted_signers,omitempty"`
	NewAssets      []AssetWithStatus `protobuf:"bytes,4,rep,name=new_assets,json=newAssets,proto3" json:"new_assets"`
	CreatedAssets  []AssetWithStatus `protobuf:"bytes,5,rep,name=created_assets,json=createdAssets,proto3" json:"created_assets"`
	DeletedAssets  []AssetWithStatus `protobuf:"bytes,6,rep,name=deleted_assets,json=deletedAssets,proto3" json:"deleted_assets"`
}

func (m *EventUpdateParams) Reset()         { *m = EventUpdateParams{} }
func (m *EventUpdateParams) String() string { return proto.CompactTextString(m) }
func (*EventUpdateParams) ProtoMessage()    {}
func (*EventUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_25c7a5d2cab627be, []int{2}
}
func (m *EventUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateParams.Merge(m, src)
}
func (m *EventUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateParams proto.InternalMessageInfo

func (m *EventUpdateParams) GetNewSigners() []string {
	if m != nil {
		return m.NewSigners
	}
	return nil
}

func (m *EventUpdateParams) GetCreatedSigners() []string {
	if m != nil {
		return m.CreatedSigners
	}
	return nil
}

func (m *EventUpdateParams) GetDeletedSigners() []string {
	if m != nil {
		return m.DeletedSigners
	}
	return nil
}

func (m *EventUpdateParams) GetNewAssets() []AssetWithStatus {
	if m != nil {
		return m.NewAssets
	}
	return nil
}

func (m *EventUpdateParams) GetCreatedAssets() []AssetWithStatus {
	if m != nil {
		return m.CreatedAssets
	}
	return nil
}

func (m *EventUpdateParams) GetDeletedAssets() []AssetWithStatus {
	if m != nil {
		return m.DeletedAssets
	}
	return nil
}

type EventChangeAssetStatus struct {
	// Sender is a sender's address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// NewAssetStatus is a pair of the asset and its new status
	OldAssetStatus AssetWithStatus `protobuf:"bytes,2,opt,name=old_asset_status,json=oldAssetStatus,proto3" json:"old_asset_status"`
	NewAssetStatus AssetWithStatus `protobuf:"bytes,3,opt,name=new_asset_status,json=newAssetStatus,proto3" json:"new_asset_status"`
}

func (m *EventChangeAssetStatus) Reset()         { *m = EventChangeAssetStatus{} }
func (m *EventChangeAssetStatus) String() string { return proto.CompactTextString(m) }
func (*EventChangeAssetStatus) ProtoMessage()    {}
func (*EventChangeAssetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_25c7a5d2cab627be, []int{3}
}
func (m *EventChangeAssetStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChangeAssetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChangeAssetStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChangeAssetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChangeAssetStatus.Merge(m, src)
}
func (m *EventChangeAssetStatus) XXX_Size() int {
	return m.Size()
}
func (m *EventChangeAssetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChangeAssetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_EventChangeAssetStatus proto.InternalMessageInfo

func (m *EventChangeAssetStatus) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventChangeAssetStatus) GetOldAssetStatus() AssetWithStatus {
	if m != nil {
		return m.OldAssetStatus
	}
	return AssetWithStatus{}
}

func (m *EventChangeAssetStatus) GetNewAssetStatus() AssetWithStatus {
	if m != nil {
		return m.NewAssetStatus
	}
	return AssetWithStatus{}
}

func init() {
	proto.RegisterType((*EventInboundTransfer)(nil), "symphony.bridge.v1beta1.EventInboundTransfer")
	proto.RegisterType((*EventOutboundTransfer)(nil), "symphony.bridge.v1beta1.EventOutboundTransfer")
	proto.RegisterType((*EventUpdateParams)(nil), "symphony.bridge.v1beta1.EventUpdateParams")
	proto.RegisterType((*EventChangeAssetStatus)(nil), "symphony.bridge.v1beta1.EventChangeAssetStatus")
}

func init() {
	proto.RegisterFile("symphony/bridge/v1beta1/events.proto", fileDescriptor_25c7a5d2cab627be)
}

var fileDescriptor_25c7a5d2cab627be = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0xc7, 0xeb, 0xa5, 0xab, 0xde, 0xba, 0x7a, 0xc7, 0x88, 0xb6, 0x11, 0x0d, 0x91, 0x56, 0x15,
	0x12, 0xbd, 0x90, 0x68, 0x45, 0x70, 0xe0, 0xb6, 0x21, 0x0e, 0x93, 0x40, 0xa0, 0x8e, 0x89, 0x89,
	0x4b, 0xe5, 0xd4, 0x0f, 0x49, 0x44, 0x63, 0x57, 0x7e, 0x9c, 0x96, 0x9e, 0xf9, 0x02, 0x7c, 0x22,
	0xb8, 0xee, 0xb8, 0x23, 0xe2, 0x30, 0xa1, 0x96, 0x0f, 0x82, 0xe2, 0x38, 0xa3, 0x97, 0x22, 0xd1,
	0x1b, 0xb7, 0xe4, 0xef, 0x9f, 0x7f, 0x7e, 0x1e, 0xdb, 0x32, 0xbd, 0x8f, 0xf3, 0x6c, 0x92, 0x48,
	0x31, 0x0f, 0x23, 0x95, 0xf2, 0x18, 0xc2, 0xe9, 0x51, 0x04, 0x9a, 0x1d, 0x85, 0x30, 0x05, 0xa1,
	0x31, 0x98, 0x28, 0xa9, 0xa5, 0x7b, 0xa7, 0xa2, 0x82, 0x92, 0x0a, 0x2c, 0x75, 0xb8, 0x17, 0xcb,
	0x58, 0x1a, 0x26, 0x2c, 0xbe, 0x4a, 0xfc, 0x70, 0xad, 0xd4, 0xce, 0x36, 0x54, 0xf7, 0x0b, 0xa1,
	0x7b, 0xcf, 0x8b, 0x55, 0x4e, 0x45, 0x24, 0x73, 0xc1, 0xdf, 0x28, 0x26, 0xf0, 0x3d, 0x28, 0xf7,
	0x80, 0x36, 0x10, 0x04, 0x07, 0xe5, 0x91, 0x0e, 0xe9, 0x35, 0x07, 0xf6, 0xcf, 0xbd, 0x4b, 0x9b,
	0x1c, 0x50, 0x0f, 0x19, 0xe7, 0xca, 0xdb, 0x32, 0x43, 0xff, 0x15, 0xc1, 0x31, 0xe7, 0xca, 0x7d,
	0x4a, 0xb7, 0x19, 0x22, 0x68, 0xcf, 0xe9, 0x90, 0x5e, 0xab, 0xef, 0x07, 0x6b, 0x4a, 0x0e, 0x8e,
	0x0b, 0xea, 0xa4, 0x7e, 0x79, 0xdd, 0xae, 0x0d, 0xca, 0x29, 0xee, 0x63, 0xda, 0x60, 0x99, 0xcc,
	0x85, 0xf6, 0xea, 0x85, 0xf5, 0xe4, 0x5e, 0x31, 0xf8, 0xfd, 0xba, 0xbd, 0x3f, 0x92, 0x98, 0x49,
	0x44, 0xfe, 0x21, 0x48, 0x65, 0x98, 0x31, 0x9d, 0x04, 0xa7, 0x42, 0x0f, 0x2c, 0xdc, 0xfd, 0x4a,
	0xe8, 0xbe, 0x69, 0xe0, 0x55, 0xae, 0xff, 0xcd, 0x0e, 0x3e, 0x39, 0xf4, 0xb6, 0xe9, 0xe0, 0x7c,
	0xc2, 0x99, 0x86, 0xd7, 0x4c, 0xb1, 0x0c, 0xdd, 0x36, 0x6d, 0x09, 0x98, 0x0d, 0x31, 0x8d, 0x05,
	0x28, 0xf4, 0x48, 0xc7, 0xe9, 0x35, 0x07, 0x54, 0xc0, 0xec, 0xac, 0x4c, 0xdc, 0x07, 0xf4, 0xd6,
	0x48, 0x01, 0xd3, 0xc0, 0x6f, 0xa0, 0x2d, 0x03, 0xed, 0xd8, 0x78, 0x05, 0xe4, 0x30, 0x86, 0x55,
	0xd0, 0x29, 0x41, 0x1b, 0x57, 0xe0, 0x4b, 0x5a, 0xf8, 0x87, 0xa6, 0x19, 0xf4, 0xea, 0x1d, 0xa7,
	0xd7, 0xea, 0xf7, 0xfe, 0xbc, 0x01, 0x6f, 0x53, 0x9d, 0x9c, 0x69, 0xa6, 0x73, 0xb4, 0x5b, 0xd1,
	0x14, 0x30, 0x33, 0x23, 0xe8, 0x9e, 0xd3, 0xaa, 0x92, 0x4a, 0xb9, 0xbd, 0x91, 0xf2, 0x7f, 0x6b,
	0xf9, 0xad, 0xad, 0xda, 0xb1, 0xda, 0xc6, 0x66, 0x5a, 0x6b, 0x29, 0xb5, 0xdd, 0x9f, 0x84, 0x1e,
	0x98, 0x53, 0x78, 0x96, 0x30, 0x11, 0x83, 0x49, 0x4b, 0x7e, 0xed, 0x45, 0xba, 0xa0, 0xbb, 0x72,
	0x6c, 0xab, 0x18, 0xa2, 0x61, 0xcd, 0x7d, 0xfa, 0xfb, 0x5a, 0x76, 0xe4, 0x98, 0xaf, 0xae, 0x78,
	0x41, 0x77, 0x6f, 0x4e, 0xa2, 0x32, 0x3b, 0x9b, 0x99, 0xab, 0xf3, 0xb0, 0xe9, 0x8b, 0xcb, 0x85,
	0x4f, 0xae, 0x16, 0x3e, 0xf9, 0xb1, 0xf0, 0xc9, 0xe7, 0xa5, 0x5f, 0xbb, 0x5a, 0xfa, 0xb5, 0x6f,
	0x4b, 0xbf, 0xf6, 0xae, 0x1f, 0xa7, 0x3a, 0xc9, 0xa3, 0x60, 0x24, 0xb3, 0xd0, 0xdc, 0xd7, 0x14,
	0x1f, 0x8e, 0x59, 0x84, 0xd5, 0x4f, 0x38, 0xed, 0x3f, 0x09, 0x3f, 0x56, 0x8f, 0x89, 0x9e, 0x4f,
	0x00, 0xa3, 0x86, 0x79, 0x44, 0x1e, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xf8, 0x2c, 0x5c,
	0xc1, 0x04, 0x00, 0x00,
}

func (m *EventInboundTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInboundTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInboundTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutboundTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutboundTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutboundTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeletedAssets) > 0 {
		for iNdEx := len(m.DeletedAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeletedAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CreatedAssets) > 0 {
		for iNdEx := len(m.CreatedAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreatedAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NewAssets) > 0 {
		for iNdEx := len(m.NewAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DeletedSigners) > 0 {
		for iNdEx := len(m.DeletedSigners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeletedSigners[iNdEx])
			copy(dAtA[i:], m.DeletedSigners[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.DeletedSigners[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CreatedSigners) > 0 {
		for iNdEx := len(m.CreatedSigners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CreatedSigners[iNdEx])
			copy(dAtA[i:], m.CreatedSigners[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.CreatedSigners[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NewSigners) > 0 {
		for iNdEx := len(m.NewSigners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NewSigners[iNdEx])
			copy(dAtA[i:], m.NewSigners[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.NewSigners[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventChangeAssetStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChangeAssetStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChangeAssetStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NewAssetStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OldAssetStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventInboundTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventOutboundTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewSigners) > 0 {
		for _, s := range m.NewSigners {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.CreatedSigners) > 0 {
		for _, s := range m.CreatedSigners {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.DeletedSigners) > 0 {
		for _, s := range m.DeletedSigners {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.NewAssets) > 0 {
		for _, e := range m.NewAssets {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.CreatedAssets) > 0 {
		for _, e := range m.CreatedAssets {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.DeletedAssets) > 0 {
		for _, e := range m.DeletedAssets {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventChangeAssetStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.OldAssetStatus.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.NewAssetStatus.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventInboundTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInboundTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInboundTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutboundTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutboundTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutboundTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSigners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewSigners = append(m.NewSigners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedSigners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedSigners = append(m.CreatedSigners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedSigners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedSigners = append(m.DeletedSigners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAssets = append(m.NewAssets, AssetWithStatus{})
			if err := m.NewAssets[len(m.NewAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAssets = append(m.CreatedAssets, AssetWithStatus{})
			if err := m.CreatedAssets[len(m.CreatedAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAssets = append(m.DeletedAssets, AssetWithStatus{})
			if err := m.DeletedAssets[len(m.DeletedAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChangeAssetStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChangeAssetStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChangeAssetStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldAssetStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OldAssetStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAssetStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewAssetStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
